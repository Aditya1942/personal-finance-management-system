import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
import { Observable, of, ReplaySubject, throwError } from 'rxjs';
import { switchMap } from 'rxjs/operators';
import { UserService } from 'app/core/user/user.service';
import { environment } from 'environments/environment';
// Generated by https://quicktype.io

export interface LoginResponse {
  id: number;
  userCode: string;
  firstName: string;
  lastName: string;
  contact: number;
  email: string;
  token: string;
  avatar?: string;
  status?: string;
  privileges?: string[];
}

@Injectable()
export class AuthService {
  private _authenticated: boolean = false;
  private baseUrl = environment.baseUrl;
  private currentUserSource = new ReplaySubject<LoginResponse>(1);
  currentUser$ = this.currentUserSource.asObservable();
  user: LoginResponse = null;

  /**
   * Constructor
   */
  constructor(
    private _httpClient: HttpClient,
    private _userService: UserService
  ) {
    this.accessToken = localStorage.getItem('accessToken') ?? '';
    let user = localStorage.getItem('user');

    if (user) {
      this.user = JSON.parse(user);
      this._authenticated = true;
      this.currentUserSource.next(this.user);
    }
  }

  // -----------------------------------------------------------------------------------------------------
  // @ Accessors
  // -----------------------------------------------------------------------------------------------------

  /**
   * Setter & getter for access token
   */
  set accessToken(token: string) {
    localStorage.setItem('accessToken', token);
  }

  get accessToken(): string {
    return localStorage.getItem('accessToken') ?? '';
  }

  // -----------------------------------------------------------------------------------------------------
  // @ Public methods
  // -----------------------------------------------------------------------------------------------------

  /**
   * Forgot password
   *
   * @param email
   */
  forgotPassword(email: string): Observable<any> {
    let formData = new FormData();
    formData.append('email', email);

    return this._httpClient.post(this.baseUrl + 'forgotPassword', formData, {
      reportProgress: true,
      responseType: 'json',
    });
  }

  /**
   * Reset password
   *
   * @param password
   */
  resetPassword(data: { token: string; password: string }): Observable<any> {
    let params = new HttpParams();
    params = params.append('token', data.token);
    params = params.append('password', data.password);

    return this._httpClient.get(this.baseUrl + 'resetPassword', {
      observe: 'body',
      params,
    });
  }

  /**
   * Sign in
   *
   * @param credentials
   */
  signIn(credentials: { email: string; password: string }): Observable<any> {
    // Throw error, if the user is already logged in
    if (this._authenticated) {
      return throwError('User is already logged in.');
    }
    console.log('credentials', credentials);

    return this._httpClient.post(this.baseUrl + 'login', credentials).pipe(
      switchMap((response: any | any) => {
        // Store the access token in the local storage
        this.accessToken = response.token;

        // Set the authenticated flag to true
        this._authenticated = true;
        this.loadCurrentUser(response);
        // Return a new observable with the response
        return of(response);
      })
    );
  }

  /**
   * Sign out
   */
  signOut(): Observable<any> {
    // Remove the access token from the local storage
    localStorage.removeItem('accessToken');
    localStorage.removeItem('user');
    this.accessToken = '';
    this.user = null;

    // Set the authenticated flag to false
    this._authenticated = false;

    // Return the observable
    return of(true);
  }

  /**
   * Sign up
   *
   * @param user
   */
  signUp(user: {
    name: string;
    email: string;
    password: string;
  }): Observable<any> {
    return this._httpClient.post(this.baseUrl + 'signup', user);
  }

  /**
   * Check the authentication status
   */
  check(): Observable<boolean> {
    // Check if the user is logged in
    if (this._authenticated) {
      return of(true);
    }
    // Check the access token availability
    if (!this.accessToken) {
      return of(false);
    }

    // If the access token exists and it didn't expire, sign in using it
    return this.loadCurrentUser(this.user);
  }
  /**
   * Load the user
   */
  loadCurrentUser(data: LoginResponse) {
    if (data === null) {
      this.currentUserSource.next(null);
      return of(null);
    }

    let headers = new HttpHeaders();
    headers = headers.set('Authorization', `Bearer ${data}`);
    headers = headers.set('Access-Control-Allow-Origin', '*');
    headers = headers.set('Access-Control-Allow-Headers', 'Content-Type');
    headers = headers.set(
      'Access-Control-Allow-Methods',
      'GET,POST,OPTIONS,DELETE,PUT'
    );
    // var decoded: any = jwt_decode(token);
    localStorage.setItem('user', JSON.stringify(data));

    if (data.userCode != '') return of(true);
    else return of(false);
  }
}
